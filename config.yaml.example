# ----------------------------------------------------
# BLE Scanner Settings
# ----------------------------------------------------
scanner:
  # Time in seconds between the start of each scan cycle.
  # Default: 10
  cycle: 10

  # Time in seconds the scanner will actively listen for BLE advertisements.
  # This value must be less than or equal to `cycle`.
  # Default: 3
  duration: 3

  # Bluetooth adapter number to use (e.g., 0 for hci0).
  # Default: 0
  interface: 0

# ----------------------------------------------------
# Device Definitions (Optional)
# ----------------------------------------------------
# Define reusable devices here to avoid repetition in automations.
# This is useful for devices that require specific constructor parameters
# like a password or a custom retry count.
devices:
  my-sensor:
    address: "11:22:33:44:55:66"
  living-room-curtain:
    address: "55:66:77:88:99:aa"
  front-door-lock:
    address: "aa:bb:cc:dd:ee:ff"
    # `config` specifies constructor arguments for the device.
    config:
      key_id: "xxx"
      encryption_key: "xxx"


# ----------------------------------------------------
# Automations
# ----------------------------------------------------
automations:
  - name: "Turn on Fan when Temperature Rises"
    # Optional: Mutes this automation for 10 minutes after it triggers.
    cooldown: "10m"
    # "if" block: Defines the trigger and conditions.
    if:
      # Source of the event. "switchbot" for real-time state changes.
      source: "switchbot"
      # Conditions to identify the target device(s) and their state.
      conditions:
        modelName: "WoSensorTH"
        # Triggers when the temperature is greater than 28.
        temperature: "> 28.0"
    # "then" block: Defines the action to be executed.
    then:
      type: "shell_command"
      # For quick testing, you can redirect to stderr (>&2) to see output
      # in the default log. However, for production use, this can clutter
      # your error logs. It's better to use actions like 'webhook' or
      # 'mqtt_publish' to send notifications to a proper system.
      command: "echo 'High temperature detected ({temperature}â„ƒ), turning on fan...' >&2"

  - name: "Button Press Notification"
    # Mute for 2 seconds to prevent bouncing/chattering effects.
    cooldown: "2s"
    if:
      source: "switchbot"
      conditions:
        modelName: "WoHand"
        address: "XX:XX:XX:XX:XX:AA"
        isOn: True
    then:
      type: "webhook"
      url: "https://example.com/notify"
      payload:
        message: "Button on device {address} was pressed."
      # Optional: Add custom headers for authentication, etc.
      headers:
        Content-Type: "application/json"
        Authorization: "Bearer YOUR_SECRET_TOKEN"

  - name: "Turn off Lights if No Motion for 5 Minutes"
    if:
      # "switchbot_timer" triggers when a state is sustained for a duration.
      source: "switchbot_timer"
      # The duration the state must be continuously met.
      duration: "5m"
      conditions:
        modelName: "WoPresence"
        address: "YY:YY:YY:YY:YY:BB"
        motion_detected: False
    then:
      type: "shell_command"
      command: "echo 'No motion for 5 minutes, turning off lights.'"

  - name: "Alert if Door is Open for 10 Minutes"
    cooldown: "1h"
    if:
      source: "switchbot_timer"
      duration: "10m"
      conditions:
        modelName: "WoContact"
        contact_open: True
    then:
      type: "webhook"
      url: "https://example.com/alert"
      payload:
        message: "Warning: Device {address} has been open for 10 minutes!"

  - name: "Control Light via MQTT"
    if:
      source: "mqtt"
      topic: "home/living/light/set"
      conditions:
        # Evaluates the entire payload of the MQTT message.
        payload: "ON"
    then:
      type: "shell_command"
      command: "echo 'Turning light ON via MQTT'"

  - name: "React to JSON payload from MQTT"
    if:
      source: "mqtt"
      topic: "home/sensors/thermostat"
      conditions:
        # Evaluates a key within a JSON payload.
        temperature: "> 22.0"
    then:
      type: "mqtt_publish"
      topic: "home/living/ac/set"
      payload:
        # The payload can be a dictionary.
        # Placeholders like {temperature} will be replaced with the actual values.
        action: "set_temperature"
        value: "{temperature}"
      # Optional QoS and retain flags
      qos: 1
      retain: true

  - name: "Notify if MQTT sensor is offline for 5 minutes"
    if:
      source: "mqtt_timer"
      duration: "5m"
      topic: "home/sensors/+/status"
      conditions:
        payload: "offline"
    then:
      type: "webhook"
      url: "https://example.com/alert"
      payload:
        message: "Sensor at topic {topic} is offline!"

  - name: "Press a SwitchBot Bot (Self-Contained)"
    if:
      source: "switchbot"
      conditions:
        modelName: "WoContact"
        contact_open: True
    then:
      # Directly control another SwitchBot device without a top-level definition.
      # This is useful for simple, one-off actions.
      type: "switchbot_command"
      # The MAC address of the target SwitchBot Bot.
      address: "XX:XX:XX:XX:XX:CC"
      # The command to execute. Must match a method in the pyswitchbot library.
      command: "press"

  - name: "Open Curtains if Room is Bright (Reference)"
    if:
      source: "switchbot"
      conditions:
        modelName: "WoContact"
        # Trigger when the light sensor detects a bright environment.
        is_light: True
    then:
      type: "switchbot_command"
      # Reference a device from the `devices` section.
      # The address and config (password, etc.) will be automatically used.
      device: "living-room-curtain"
      # Command to set the curtain position.
      command: "set_position"
      # `params` specifies method parameters for the command.
      params:
        position: 100 # 0 = closed, 100 = fully open

  - name: "Monitor Living Room Meter (using device alias)"
    if:
      source: "switchbot"
      # Use a device alias defined in the top-level `devices` section.
      # The `address` from the `my-meter` definition will be automatically
      # injected into `conditions.address`.
      device: "my-meter"
      conditions:
        # If `address` is also specified here, the `device` alias's address
        # will take precedence and overwrite it.
        temperature: "> 25.0"
        humidity: "< 60.0"
    then:
      type: "shell_command"
      command: "echo 'Living room is hot and humid! ({temperature}C, {humidity}%)' >&2"

# ----------------------------------------------------
# MQTT Client Settings
# ----------------------------------------------------
mqtt:
  # Hostname or IP address of the MQTT broker.
  host: "localhost"

  # Port number for the MQTT broker.
  # Default: 1883
  port: 1883

  # Optional: Username for authentication.
  # username: "your_username"

  # Optional: Password for authentication.
  # password: "your_password"

  # Interval in seconds to wait before attempting to reconnect.
  # Default: 10
  reconnect_interval: 10

# ----------------------------------------------------
# Prometheus Exporter Settings
# ----------------------------------------------------
prometheus_exporter:
  # Enable/disable the exporter feature.
  # Default: false (disabled)
  # Set to `true` to enable the Prometheus exporter.
  enabled: false

  # Port for the exporter to listen on.
  # Default: 8000
  port: 8000

  # Specify the devices and metrics to target.
  target:
    # Only devices with an address in this list will be targeted.
    # If this key is missing or the list is empty, all discovered devices will be targeted.
    addresses:
      #  - "00:00:5E:00:53:00"
      #  - "00:00:5E:00:53:01"

    # Only metrics in this list will be exported.
    # If this key is missing or the list is empty, all available metrics will be exported.
    metrics:
      # - "temperature"
      # - "humidity"
      # - "battery"
      # - "rssi"

# ----------------------------------------------------
# Logging Settings
# ----------------------------------------------------
logging:
  # Default log level for the application: DEBUG, INFO, WARNING, ERROR
  # This is overridden by the --debug flag.
  level: "INFO"

  # Log format, using Python's logging format syntax.
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"

  # Set specific log levels for noisy libraries.
  # This is useful for debugging specific components without enabling global debug.
  # These settings are ignored if the --debug flag is used.
  loggers:
    bleak: "WARNING"
    # Example: Set bleak to DEBUG for in-depth BLE troubleshooting
    # bleak: "DEBUG"
    # Example: Enable trigger execution logs for debugging automations
    # switchbot_actions.triggers: "DEBUG"
