name: Publish Release

on:
  release:
    types: [created]

jobs:
  publish-to-pypi:
    name: Build and publish to PyPI
    if: "!github.event.release.prerelease"
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/switchbot-actions
    permissions:
      id-token: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install dependencies
        run: pip install build
      - name: Build package
        run: python -m build
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  publish-docker:
    name: Build and publish Docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=pep440,pattern={{version}}
            type=raw,value=latest,enable=${{ !github.event.release.prerelease }}

      - name: Build and push intermediate images
        uses: docker/bake-action@v5
        with:
          push: true
          provenance: false
          set: |
            app.tags=ghcr.io/${{ github.repository }}:${{ steps.meta.outputs.version }}-app
            app-armv6.tags=ghcr.io/${{ github.repository }}:${{ steps.meta.outputs.version }}-armv6
            *.args.APP_VERSION=${{ steps.meta.outputs.version }}
            *.args.IS_PRERELEASE=${{ github.event.release.prerelease }}
            app.cache-from=type=registry,ref=ghcr.io/${{ github.repository }}:build-cache
            app.cache-to=type=registry,ref=ghcr.io/${{ github.repository }}:build-cache,mode=max
            app-armv6.cache-from=type=registry,ref=ghcr.io/${{ github.repository }}:build-cache-armv6
            app-armv6.cache-to=type=registry,ref=ghcr.io/${{ github.repository }}:build-cache-armv6,mode=max

      - name: Create and push final manifest list
        run: |
          TAGS=$(echo "${{ steps.meta.outputs.tags }}" | sed -e 's/^/--tag /')

          docker buildx imagetools create \
            $TAGS \
            ghcr.io/${{ github.repository }}:${{ steps.meta.outputs.version }}-app \
            ghcr.io/${{ github.repository }}:${{ steps.meta.outputs.version }}-armv6

#      - name: Clean up intermediate image tags
#        if: always() # 前のステップが成功しても失敗しても実行
#        run: |
#          echo "Deleting intermediate tags..."
#          gh api \
#            --method DELETE \
#            "/orgs/${{ github.repository_owner }}/packages/container/${{ env.IMAGE_NAME }}/versions?package_version_ids=$( \
#              gh api "/orgs/${{ github.repository_owner }}/packages/container/${{ env.IMAGE_NAME }}/versions" \
#                --jq '.[] | select(.metadata.container.tags[] | test("-app$|-armv6$")) | .id' | paste -sd ',' - \
#            )"
#        env:
#          # パッケージ名を環境変数に設定しておくと便利です
#          IMAGE_NAME: ${{ steps.meta.outputs.repository }}
